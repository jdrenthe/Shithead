@page "/password/reset";
@layout Shithead.Client.Shared.Layouts.Empty;

@inject IUserApiService _userService;
@inject NavigationManager _navigationManager;

<section id="passwordReset" class="container py-5">
    <div class="row">
        <div class="col-12">
            <div class="text-center p-4">
                <h2>Reset password</h2>
                <p class="text-muted">You didn't even needt to play the game to become a ShitHead!</p>
                <hr />
            </div>
            <div class="d-flex justify-content-center row">
                @if (!passwordResetSend)
                {
                    <EditForm Model="@model" OnValidSubmit="@(async () => await HandleValidSubmit())" class="form">
                        <DataAnnotationsValidator />

                        <div class="row">
                            <div class="col-12">
                                <div class="mt-4">
                                    <InputText @bind-Value="model.Email" class="form-control" type="text" placeholder="email" />
                                    <ValidationMessage For="() => model.Email" />
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(error))
                        {
                            <label>error</label>
                        }

                        <div class="row mt-4">
                            <div class="d-grid gap-4 col-12 mx-auto">
                                <button class="btn btn-outline gradient @loading.Css" disabled="@loading.Value" type="submit">
                                    <span><span>Reset password</span></span>
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="row mt-4">
                        <div class="col-12 text-center">
                            <label class="font-size-30 fw-600">Check your email!</label>
                            <label>We have send you a email with a link where you can change your password with</label>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <div class="d-grid gap-4 col-12 mx-auto">
                            <button @onclick="@(() => LoadPage(""))" class="btn btn-primary" type="button">Home</button>
                        </div>
                    </div>
                }

            </div>
            <div class="text-center w-100">
                <hr />
                <p class="text-muted mt-2">Do you remember your shity password, <span @onclick="@(() => LoadPage("singin"))">Login</span></p>
            </div>
        </div>
    </div>
</section>

@code {
    /// <summary>
    /// Model
    /// </summary>
    public Models.Forms.PassswordReset model = new();

    /// <summary>
    /// Password reset send
    /// </summary>
    public bool passwordResetSend { get; set; }

    /// <summary>
    /// Error
    /// </summary>
    public string error { get; set; }

    /// <summary>
    /// Button loading
    /// </summary>
    public Loading loading { get; set; } = new(false);

    /// <summary>
    /// When the user sumbits there data we sing them in
    /// </summary>
    private async Task HandleValidSubmit()
    {
        loading = new(true);
        error = null;

        // Reset password email
        var result = await _userService.SendPasswordResetTokenEmail(
            new(adress: model.Email,
                title: "Forgot your password?",
                subject: "Forgot your password?",
                name: string.Empty,
                html: new BlazorTemplater.ComponentRenderer<Emails.PasswordReset>()
                                         .Render()));

        if (!result.Success)
        {
            error = "The entered email address was not found";
            loading = new(false);

            return;
        }

        passwordResetSend = true;
        loading = new(false);
    }

    /// <summary>
    /// Loads another page
    /// </summary>
    private void LoadPage(string name) => _navigationManager.NavigateTo($"/{name}");
}
