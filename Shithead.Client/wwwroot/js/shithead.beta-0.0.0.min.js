/**
 * Downloads file
 * name: "xxx.xxx"
 * contentType: "xxx/xxx"
 * Content: byte[]
 * The code comes from: https://www.meziantou.net/optimizing-js-interop-in-a-blazor-webassembly-application.htm
 * @param {string} name
 * @param {string} contentType
 * @param {byteArray} content
 */
window.downloadFile = (filename, contentType, content) => {
    const exportUrl = createObjectURL(filename, contentType, content);

    // Create the <a> element and click on it
    const a = document.createElement("a");
    document.body.appendChild(a);
    a.href = exportUrl;
    a.download = filename;
    a.target = "_self";
    a.click();

    revokeObjectURL(exportUrl);
}

/**
 * Creates the export URL
 * @param {any} filename
 * @param {any} contentType
 * @param {any} content
 */
function createObjectURL(filename, contentType, content) {
    const data = base64DecToArr(content);

    const file = new File([data], filename, { type: contentType });
    return URL.createObjectURL(file);
}

/**
 * Release the memory
 * @param {any} exportUrl
 */
function revokeObjectURL(exportUrl) {
    URL.revokeObjectURL(exportUrl);
}

/**
 * Convert a base64 string to a Uint8Array. This is needed to create a blob object from the base64 string.
 * The code comes from: https://developer.mozilla.org/fr/docs/Web/API/WindowBase64/D%C3%A9coder_encoder_en_base64
 * @param {any} nChr
 */
function b64ToUint6(nChr) {
    return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
}

/**
 * byte[] to a base64 string,
 * so we first need to convert the string (content) to a Uint8Array to create the File
 * @param {any} sBase64
 * @param {any} nBlocksSize
 */
function base64DecToArr(sBase64, nBlocksSize) {
    var
        sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""),
        nInLen = sB64Enc.length,
        nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
        taBytes = new Uint8Array(nOutLen);

    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
        nMod4 = nInIdx & 3;
        nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
        if (nMod4 === 3 || nInLen - nInIdx === 1) {
            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
            }
            nUint24 = 0;
        }
    }
    return taBytes;
}
/**
 * Card dropped
 * */
var cardIsNotDropped = true;

/**
 * Initialize draggable
 */
window.initializeDraggable = () => {
    $('.draggable').draggable({
        start: function (event, ui) {
            $(this).css("z-index", 3);
            $(this).parent().closest('div').css("z-index", 3);

            cardIsNotDropped = true;
        },
        stop: function (event, ui) {
            $(this).css("z-index", 2);
            //$(this).parent().closest('div').css("z-index", 2);
            $(this).css({ left: 0, top: 0 });
        }
    });
}

/**
 * Initialize droppable
 */
window.initializeDroppable = () => {
    $('.droppable').droppable({

        drop: function (event, ui) {
            if (cardIsNotDropped) {
                DotNet.invokeMethodAsync("Shithead.Client", "CardDropped", ui.draggable.attr("id"), $(this).attr('id'));
            }

            cardIsNotDropped = false;
        }
    });
}

/**
 * Closes modal by id
 * @param {any} modalId
 */
window.closeModal = (modalId) => {
    $(modalId).hide();
    $('body').removeClass('modal-open');
    $('.modal-backdrop').remove();
}

/**
 * Opens model by id
 * @param {any} modalId
 */
window.openModal = (modalId) => {
    $(modalId).modal('show');
}

/**
 * Scrolls to element by id
 * @param {any} elementId
 */
window.scrollToElement = (elementId) => {
    $('html, body').animate({
        scrollTop: $(elementId).offset().top - 120
    }, 500);
}

/**
 * hides element by id
 * @param {any} elementId
 */
window.hideElement = (elementId) => {
    $(elementId).addClass('d-none');
}

/**
 * shows element by id
 * @param {any} elementId
 */
window.showElement = (elementId) => {
    $(elementId).removeClass('d-none');
}

/**
 * Redirects to url
 * @param {any} url
 */
window.redirect = (url) => {
    window.location.replace(url);
}

/**
 * Toggles dropdown by id
 * @param {any} dropdownId
 */
window.toggleDropdown = (dropdownId) => {
    $(dropdownId).dropdown('toggle');
}

/**
 * Gets the share model
 * @param {*} title 
 * @param {*} text 
 * @param {*} url 
 * @param {*} modelId 
 */
window.share = (title, text, url, modelId) => {
    if (("share" in navigator)) {
        navigator.share({
            title: title,
            text: text,
            url: url
        });
        return;
    }

    $(modelId).modal('show');
}

/**
 * Provides ability to copy
 * @param {*} text 
 */
window.copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
}

// Initialize deferredPrompt for use later to show browser install prompt.
var evenInstallprompt;

/**
 * Stash the beforeinstallprompt event
 */
window.addEventListener('beforeinstallprompt', (e) => {
    evenInstallprompt = e;
});

/**
 * Is even install promptNull
 */
window.isEvenInstallpromptNull = () => {
    return evenInstallprompt == null;
}

/** 
 * Prompts pwa install
 */
window.promptPwaInstall = async () => {
    if (evenInstallprompt == null) {
        return;
    }

    evenInstallprompt.prompt();

    const { outcome } = await evenInstallprompt.userChoice;
    if (outcome === 'accepted') {
        evenInstallprompt = null;
    }
}


//Origin see: https://github.com/dotnet-presentations/blazor-workshop/blob/master/src/BlazingPizza.ComponentsLibrary/wwwroot/pushNotifications.js

const applicationServerPublicKey = 'BJXtcLOGwb3OGYKRlLVDKnfte5GoVWMRPVSJfZ4iVuRb7QU8PrggkDA5Yf8kB10x_6CaJHukBfsGv_8qbNesymM';

/**
 * Subscribe to service worker
 * @param {any} worker
 */
async function subscribe(worker) {
    try {
        return await worker.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerPublicKey
        });
    } catch {
        return null;
    }
}

/**
 * Array buffer to Base64
 * @param {any} buffer
 */
function arrayBufferToBase64(buffer) {
    // https://stackoverflow.com/a/9458996
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;

    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }

    return window.btoa(binary);
}

/**
 * Gets push notification subscription
 * */
window.getpushNotificationSubscription = async () => {
    const worker = await navigator.serviceWorker.getRegistration();
    const existingSubscription = await worker.pushManager.getSubscription();

    //If there is an existing subscription use that
    if (existingSubscription) {
        return {
            url: existingSubscription.endpoint,
            p256dh: arrayBufferToBase64(existingSubscription.getKey('p256dh')),
            auth: arrayBufferToBase64(existingSubscription.getKey('auth'))
        };
    }

    //There is no subscription so promt the user for acces and create it
    const newSubscription = await subscribe(worker);
    if (newSubscription == null) {
        return null;
    }

    return {
        url: newSubscription.endpoint,
        p256dh: arrayBufferToBase64(newSubscription.getKey('p256dh')),
        auth: arrayBufferToBase64(newSubscription.getKey('auth'))
    };
};
window.ready = () => {
    /**
     * On scroll
     */
    window.addEventListener('scroll', function () {
        if (window.scrollY > 0) {
            $('nav').addClass('scrolled');
        }
        else {
            $('nav').removeClass('scrolled');
        }
    })
}